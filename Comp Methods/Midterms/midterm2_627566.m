function[]=midterm2_627566%()clear all; clc; close all% This is a simple driver function% that you do not need to change,% but it could be used for commenting out% calls to code for one problem or another. p1()%sorry it is messy didnt have enough time to make it look good%sorry again- wesleyp2() p3()end%---------------------------------% part 1: code starts here%---------------------------------function[]=p1()% (a) here is some code to use to confirm that your newNC%     function actually works f = @(x)  x.^3;a = 3; b = 4;N = 4;I_true = 1/4*(4^4) - 1/4*(3^4) A_test = newNC(f,a,b,N)% (b) estimate the integralf = @(x) log(x).*x.^3;a = 3.3452538766652; b = 8.3152349847262;N = 4;A1 = newNC(f,a,b,N)% (c) estimate with twice as many intervalsN = 8;A2 = newNC(f,a,b,N)% (d) estimate error in your solution to (c)n = 16errorestA12 = abs( A2- A1)/(n-1)endfunction[I_newNC]=newNC(f,a,b,N)    % = Integrate using the new N.C.  method        =% = f   :: function name                        =% = a   :: lower bound                          =% = b   :: upper bound                          =% = N   :: number of intervals                  =% ===============================================% define interval sizeh = ( b - a ) / N;% number of data pointsn = N + 1;if (mod(N,4)~=0)    display('interval error')    I_newNC = NaN;    returnend% range of independent variable valuesx = a:h:b;h1 = h;interval1 = 2;interval2 = 4;start1 = 2;start2 = 3;I_newNC = ((4*h1)/3) *(2*(sum(f(x(start1:interval1:n-1)))) - (sum(f(x(start2:interval2:n-2)))))end%---------------------------------% part 2: code starts here%---------------------------------function[]=p2()T = [10 12 14  16 18  20 22 24 26 28 30]';S = [...   4.635706453739581   4.028514161725839   3.360006688949629   2.837198456900121   2.551086145246655   2.367020473448062%2   2.153244012451863   2.142062892201657   2.053140417658772   2.132806414947129   2.059933729682769]   % (a) data plotfigure(1)plot(T,S,'o')title('temperature and solubility of a contaminant in jet fuel')ylabel('solubility()')xlabel('Tempature( C)')legend('data')% (b) find coefficients%log(s/b) = m/Tsollog = log(S);n = length(T);invT = 1./T;X = [ones(n,1) invT];a = X \ sollog% (c) regression plotf = @(invT) exp(a(1) + a(2) * invT  );hold onplot(T,f(invT),'-')legend('data','regression')%calculate m valuem = a(2)% log(s/b) = m/T% s/b = e^(m/T)% s/e^(m/T) = b% b = s/e^(m/T)b = S(5)/exp(m/T(5))% (d) evaluate at T = 21T1 = 21;evaluate = f(1/T1)end%-----------------------------------% part 3: code starts here%-----------------------------------function[] = p3()x = [0.1:0.1:0.5]; % [m]h3 = 0.2;h5 = 0.1;T = [116.1864  134.9869  156.8352  182.2179 211.7026]; %[K]u = 1; % [m^2/s]% figure(2)% plot(x,T)% add code for estimating u*d^2T/dx^2 here:xi = 0.3;%three point central using 0.1 0.3 0.5%f'' =  -2fxi) + f(xi-1)FD31 = (-2*(T(3))+T(1)+T(5))/(h3^2)%three point central using 0.2 0.3 0.4FD32 = (-2*(T(3))+T(2)+T(4))/(h5^2)%five point centeralFD5 = (-T(1)+16*T(2)-30*T(3)+16*T(4)-T(5))/(12*h5^2)%richardson Exptrapolation for FD3 FD32%RE = 2^n ()/ (2^n) -1%FD5 is most accurate n = 2;RE1 = ((2^n *FD32) - FD31)/ ((2^n) -1)%quantitative estimate of the uncertaintyError = abs(RE1 - FD32)% The five point central is the same value as the richardson Exptrapolation for FD3 FD32answer = RE1 end